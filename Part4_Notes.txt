------
Part 4
------
a Structure of backend application, introduction to testing

    - Project structure 
        - should look like this:
            ----------------------
            ├── index.js
            ├── app.js
            ├── build
            │   ├── ...
            ├── controllers
            │   └── notes.js
            ├── models
            │   └── note.js
            ├── package-lock.json
            ├── package.json
            ├── utils
            │   ├── config.js
            │   ├── logger.js
            │   └── middleware.js  

        - logger for printing normal log messages and error for all error messages 
        - handling of environment variables are in the config.js 
            - import by require('./utils/config')
        - routes are referred to as controllers 
            - router object is an isolated instance of middleware and routes. You can think of it as a "mini-application", capable only of performing middleware and routing functions 
            - when we declare router, we will use relative paths in the RESTful implementation ('/api/notes/:id) -> ('/:id), but in the original we have to define this "root", 
                - app.use('/api/notes', notesRouter)
        - middleware moved to utils/middleware.js module 
        - responsibility of establishing the connections to the DB has been given to the app.js module and where everything connects
        - ./models/notes.js is the directory that defines the Mongoose schema for notes 


    - Testing node applications 
        - we can use a testing library called JEST - works well for backends, and works well for React apps 
        - in order to use jest, we have to specify this additional step to the end of package.json or have JEST look for a config file with the default name jes.config.js:
            {                                               
            //...
            "jest": {
            "testEnvironment": "node"
                }
            }
                        
            module.exports = {
            testEnvironment: 'node',
            };

        - eslint would complain about jester, so we have to set true to the env property in the .eslinrc.js file 
        - we use describe, test, and expect methods to allow jester to perform its tasks 

        - when we only one to test one case: 
            - npm test -- -t 'when list has only one blog, equals the likes of that'

b Testing the backend
    - Test environment 
        - have to use cross-env to allow cross-environment tests 
        - use separate database for test and production (defined in the .env file)
        - modify our package.json so that environment info will be inserted into function, e.g.: 

            "test": "cross-env NODE_ENV=test jest --verbose --runInBand",
            TEST_MONGODB_URI = ... 

            if (process.env.NODE_ENV === 'test') {
            MONGODB_URI = process.env.TEST_MONGODB_URI
            }

    - supertest 
        - helps us write tests for testing the backend API 
        - tests would take the Express application  and wrap it with the supertest function into a superagent object. 
            - object is assigned to the API variable and tests can uses it for making HTTP requests to the backend 
        - use async and await keywords allows to write asynchronous code with the appearance of synchronous code 
        - close mongoDB connection after all tests are done: 

            afterAll(() => {
                mongoose.connection.close()
            })

        - have to add jest.config.js file at the root of the project that specifies the test environment 
        - test only uses the express application defined in the app.js file 
        - supertest take care that the application being test is started at the port it uses internally 
        - using async / await syntax allows us to not have to use callback functions to access the data returned by promises

    - initialize database before tests 
        - use before eachEach method to initialize database before every test 

    - async / await 
        - fetching of notes from the DB with promises look like this: 
            
            Note.find({}).then(notes => {
            console.log('operation returned the following notes', notes)
            })

        Note.find() method returns a promise and we can access the result of the operation by registering a callback function with the then method 

        Code we want to execute once the operation finishes is written in the callback function - making several async function calls will be painful as all the async calls have to be in the callback, which will eventually lead to callback hell 

        Comparisons: 
            - we can keep chaining callbacks:   

                Note.find({})
                .then(notes => {
                    return notes[0].remove()
                })
                .then(response => {
                    console.log('the first note is removed')
                    // more code here
                })

            - but using async will make the code significantly cleaner and more understandable: 

                const main = async () => {
                const notes = await Note.find({})
                console.log('operation returned the following notes', notes)

                const response = await notes[0].remove()
                console.log('the first note is removed')
                }

                main()

    - async / await in backend 
        -  we can change backend to async / await 

            notesRouter.get('/', async (request, response) => { 
            const notes = await Note.find({})
            response.json(notes.map(note => note.toJSON()))
            })

    - more test and refactoring the backend 
        - we can have a module that contains helpers for tests 
        - tests can also use async / await syntax 

    - error handling and async/await 
        - if there's an exception while handling the POST request, we end up with an unhandled promise rejection, and the request never receives a response 
        - we use try/catch mechanism to handle these exceptions 

    - eliminating the try-catch 
        - we can remove the try-catch clutter by using the express-async-errors module, which allow us to eliminate the try-catch blocks completely 

    - optimizing the beforeEach function 
        - we can use promisAll to transform an array of promises into a single promise, that will be fulfilled once every promise in the array passed to it as a parameter is resolved

    - Refactoring tests 
        - we can refactor tests and use describe to group their functionalities and the purpose of the tests 

c User administration
    - References across collections 
        - unlike in relational DBs, NoSQL DBs have more ways of modeling keys 
            - Moytan2@godaddy.comngo does not support join queries like relational DBs 
            - you can even store data in users collections 
    
    - Mongoose schema for users 
        - we can make the decision to store the ids of the notes created by the user in the user document itself by defining the user model and having the user schema as: 

        const userSchema = new mongoose.Schema({
        username: String,
        name: String,
        passwordHash: String,
        notes: [
            {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Note'
            }
        ],
        })

        - type of field is ObjectId that references "note"-style objects. Mongo does not inherently know that this is a field that references notes - syntax is purely related to and defined by Mongoose 

    - creating users 
        - we use a new route to create new users : use bycrypt package that uses OWFs to encrypt plaintext passwords in the DB 
            - we have to define saltRounds as a parameter into bcrypt. Saltrounds == 2^rounds iterations of processing of value 
        - test-driven development, where tests for new functionality are written before the functionality is implemented 
        - can use "mongoose-unique-validator" to ensure that DBs have unique values 

    - creating a new note 
        - we have to expand implementation, so information about the user who created a note is sent in the userId field in the request body 
        - user object also changes. The id of the note is stored in the notes field

    - Populate 
        - a join query that allows us to add user info into notes and vice versa 
        - the database does not actually know that the ids stored in the user field of notes reference documents in tne use collection 
        - functionality of the populate method of Mongoose is based on the fact that we have defined "types" to the references in the Mongoose schema with the ref option 





d Token authentication
