------
Part 0 
------
Fundamentals of Web Apps 
server and web browser communicate with HTTP protocols
	- Code 200 == successful 

Traditional web applications 
	- Response headers:
		- size of the response in bytes 
		- exact time of response 
		- Content type tells us response is either text file, image/png etc. 

	- Response tab:
		- shows regular HTML page 
		- body section determines the structure of the rendered page 

	- browser does HTTP GET request to the server to fetch the HTML code of the page 
	- the img tag in the HTML prompts the browser to fetch the image. The browser renders the HTML page and the image to the screen
	- Writing HTML in the midst of the code is of course not smart, but for old-school PHP-programmers it was a normal practice.

DOM 
	- based on the idea of depicting HTML elements as a tree
	- DOM is an API, which enables programmatic modification of the element trees corresponding to web=-pages 

	- Manipulating DOM 
		- we can actually add to the DOM 
		- changes to modified DOM are not permanent. If the page is reloaded, the new note will disappear
			- changes not pushed to the server 

CSS (cascading style sheets)
	- markup language used to determine the appearance of web applications 
	- head of HTML element will contain a <link> tag to tell the browser to fetch the CSS style sheet
	- change on console will not be permanent
		- to make lasting changes, you would have to push to server 

Forms and HTTP Post 
	- request to server address new_note. 
	- server responds, but will force browser to get all resources again (fetch unnecessarily/wasting resources)
	- data is sent as the body of the POST-request 
	- server can access the data by accessing the req.body (req == request) 

AJAX (asynchronous JavaScript and XML)
	- enabled fetching of contents of webpages using JavaScript included within the HTML, without the need to re-render the page 
	- Prior to AJAX, all web pages worked like the traditional web app in previous section 
		- all of the data shown on the page was fetched with the HTML-code generated by the server 
		- not acceptable as they don't use the RESTful APIs
	- immediate, "in-place" update of page content 

Single page app 
	- Traditional web-page: 
		- all of the logic is on the server, and the browser only renders the HTML as instructed 
		- browser would reload the page - potentially causing more HTTP requests: fetching the style sheet, the JavaScript code, and the raw data of the notes 
			- data would be sent as the body of the POST-request 

	- SPA:
		- doesn't fetch all of their pages separately from the server like our application, but instead comprises of only one HTML page fetched from the server, the contents of which are manipulated with JavaScript that executes in the browser 
		- browser would only send one request to the server 
		- form tag is different: form has no action or method attributes to define how and where to send the input data 
		- page doesn't reload at any point of the process, nor does control transfer to another page 
			- obtains a JSON data file from the server (content-type: application/json - needed for browser to know how to parse data)
		- requires active JavaScript, because we need to manipulate DOM tree

JavaScript libraries 
	- different libraries containing tools tht are easier to work with compared to the DOM-API are of ten used to manipulate pages 
	- JQuery was developed backed when web-pages mainly followed the traditional style of the server generating HTML pages, the functionality of which was enhanced on the browser side using JavaScript written with JQuery

Full stack 
	- means focus is on FrontEnd, BackEnd, and Database 
	- user (Browser) related = front | server related = back 