------
Part 5
------
a. Login in frontend 
    - intro 
        - will implement front end that supports user management functionality 
        - Logging in is done by sending an HTTP POST request to server address api/login
            - login success: form fields are emptied and the server response is saved to the user field to the applications state 
            - login fail: results in an error, the user is notified 
            - show the login form only if the user is not logged in 
            - react trick for conditional rendering: 
                -  
                    {user === null ?
                    loginForm() :
                    noteForm()
                    }

    - creating new notes 
        - token returned with successful login is saved to the application state user field token 
        - we have to fix creating new notes to work with the backend
            - noteService module would contain a private variable token. It's value can be changed with a function setToken, which is exported by the module 
            - create, now with async/await syntax, sets the token to the Authorization header 

    - saving the token to browsers local storage 
        - when pages are rerendered, information of the user's login disappears
        - use local storage (cache) to save key-value database in the browser 
        - values in the storage stay even when the page is rerendered. 
        - storage is origin-specific so each web app has its own storage 
        - values saved to the storage are DOMstrings, so we cannot save a JavaScript object as is. The object has to be first parsed to JSON with JSON.stringify and then parsed back with JSON.parse
        - use effecthook to fetch notes from the server to the frontend 
        - empty array as the parameter of the effect ensures that he effect is executed oly when the component is rendered for the first time 
        - logging out:
            - window.localStorage.removeItem('loggedNoteappUser')
            - window.loclStorage.clear()

b. props.children and proptypes 
    - displaying login info form only when appropriate 
        - use <div style={hideWhenVisible}> to toggle if we should hide / show sections in the component 
        
    - props.children 
        - Toggable component has both opening and closing tags which surround a LoginFom component. In React terminology LoginForm is a child component of Toggable 
            - we can add any React elements we want between the opening and closing tags of Toggable 
        - the props.children is the code used for referencing the child components of the component. THe child components are the React elements we define between the opening and closing tag of a component 
            - children is automatically added by React and always exists. If a component is defined with an automatically closing />, then the props.children is an empty array 
    
    - state of the forms 
        - should life the shared state up to their closest common ancestor 
        - move the state of hte forms to their corresponding components 
        - functionality should also be passed as well 

    - references to components with ref 
        - use the ref keyword which offers a reference to the component
        - Visibility is controlled with the visible variable inside the Toggable component, but we would want to access it outside of the component 
        - Function that creates the component is wrapped inside ofa forwardRef function call, allowing the component to access the ref that is assigned to it 
        - component uses the useImperativeHandle hook to make its toggleVisibility function available outside of the component
        - we can now hide the form by calling notFormRef.current.toggleVisibility() after a new note has been created 

    - one point about components 
        - when we define a component and create three components, each one has its own separate state 

    - PropTypes 
        - we can defined a prop as mandatory or required string-type prop, so that it won't render empty string 

c. Testing react apps 
d. End to end testing