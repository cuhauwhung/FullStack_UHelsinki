------
Part 1
------
a. Introduction to React 
	- start learning how to use react 
		- component 
			- all content that needs to be rendered is usually defined as React components 

		- JSX 
			- Looks like React components are returning HTML markup, but actually under the hood JSX returned by React components is compiled into JavaScript 
			- same thing as HTML, except you can easily embed dynamic content by writing appropriate JavaScript within curly braces 
			
		- multiple components
			- Writing components with React is easy, and by combining components, even a more complex application can be kept fairly maintainable
			- core philosophy of React is composing applications from many specialized reusable components 

		- props: passing data to components 
			- we can pass data into components 
		
		- Other info:
			- console.log is useful for debugging purposes 
			- React components have to capitalized 
				- if we don't capitalize, React is only going to an empty element in the HTML 
			- Need at least one root element 

		Q: aren't components just functions / methods that return information to be rendered?

b. Javascript
	- section simply about JavaScripts syntax 
	- Variables 
		- in JS, variable scopes are only in functions 
		- JS gets "hoisted" to the top of function: as if they are defined at the beginning of the function
			- can keep "walking" up into the scopes; and accidentally declare global variables 
		- var: scope to immediate function body 
		- let: scope to immediate enclosing block {}

	- JS lambdas e.g.? 
		const t = [1, 2, 3]
		const m1 = t.map(value => value * 2)

	- Arrays: 
		- append is push 
		- accessing element at index is by using [] 

	- Objects:
		- can be accessed directly: no privileges 		

	- Functions:
		1) 
			const sum = (p1, p2) => {
			console.log(p1)
			console.log(p2)
			return p1 + p2
			}
			const result = sum(1, 5)
		
		2) 
			const square = p => {
			console.log(p)
			return p * p
			}
			const square = p => p * p

		3) 
			function product(a, b) {
			return a * b
			}
			const result = product(2, 6)


	- Classes:
		- we can simulate OOP, but JS doesn't have OOP functionalities 

c. Component state, event handlers 
	- Component helper functions
		- can write helper functions within components to make code cleaner 
		- unlike Java, we can define functions with other functions

	- Destructuring
		- streamline component by just declaring new variables and assigning them with values from prop
		- functions in JavaScript don't have to have an explicit return
			- by using arrow definition we can bypass this 
		
		- E.g.:
			const { name, age } = props
			const bornYear = () => new Date().getFullYear() - age

			// will automatically assign the props into {name, age} vars
			const Hello = ({ name, age }) => {

	- Page re-rendering
		- we can call ReactDom.render() multiple times to re-render page

	- Stateful component
		- allows state to be able to change during the lifecycle of the component 
		- uses "state hook" to hook into react features
			- when: write a function component that needs some state - we can Hook inside the existing function component

		Q: how is this different from just using a global variable to track counts?
		A(?): state is for re-rendering purposes, if we use global variables, it won't keep track of previous variable states?

	- Event handling
		- how should we handle a user's interaction with different elements of a web page 
		- clicking can log elements onto screen
		- E.g.: 
			<button onClick={() => console.log('clicked')}>

	- Event handler is a function
		- An event handler is supposed to be either a function or a function reference; it cannot be a function call 
		- defining event handlers within JSX-templates is not a good idea; should separate them into different functions

	- Passing state to child components
		- better to write React components that are small and reusable across the application and even across projects 
		- we can implement new functionality into our button clicking logic easily 

	- Refactoring the components
		- can refactor components to make code significant cleaner and more condense

d. A more complex state, debugging React apps
	- Complex state
		- we can initialize new structs to handle more complex state 
			- like handle left / right clicks 
			- use the spread syntax to "ignore" other elements in an array, but add properties to specific properties 
				- E.g.
					function myFunction(x, y, z) { }
					const args = [0, 1, 2];
					myFunction.apply(null, args); | myFunction(...args);
			- in React, we can't mutate state directly - will result in unexpected side effects. Have to change state into a new object 

	- Handling arrays
		- we can store state information about application state into arrays 
		- don't use push but use concat 
			- concat: merges two arrays and returns a new array (doesn't change state directly)
			- push: adds elements to the end of an array and returns the new length of the array 

	- Conditional rendering
		- Set conditional statements in components to perform rendering 
			- component renders completely different React elements based on the state of the application

	- Old React
		- state hooks are part of the new React components 

	- Debugging React applications
		- Keep the browser's developer console open at all times 
		- Console tab should always be open 
			- React developer tools extension to Chrome 
		- Find problem and debug immediately
		
	- Rules of Hooks
		- useState shouldn't be used inside of a loop
			- ensure that the hooks are always called in the same order 
		- hooks should only be called from the inside of a function body that defines a React component 

	- Event Handling Revisited
		- Flaws:

			<button onClick={value + 1}>button</button>		// we try to set the event handler value to value + 1, which returns the value of the operation, but it should be a function

			<button onClick={value = 0}>button</button>		// event handler is not a function but a variable assignment. Also, shouldn't mutate state directly in React

			<button onClick={console.log('clicked the button')}>		// event handler is defined as a function call which means that the event handler is actually assigned a returned value from the function, which in the case of console.log is undefined. Console.log function call gets executed when the component is rendered and for this reason it gets printed once to the console 

			<button onClick={setValue(0)}>button</button>		// one again tried to set a function call as the event handler. When the component is rendered, the function setValue(0) gets executed, which causes the component to be re-rendered. Process repeats == infinite recursion

		- Correct way:

				<button onClick={() => console.log('clicked the button')}>		// event handler is now the function () => console.log...

				<button onClick={() => setValue(0)}>button</button>		// event handler is now the function () => setValue(0)

		- event handler can be composed of multiple functions:

				const handleClick = () => {
					console.log('clicked the button')
					setValue(0)
				}

				<button onClick={handleClick}>button</button>

	- Function that returns a function
		- you can actually have a function call be an event handler, but the function call has to return a function 
		- E.g.:
				<button onClick={hello()}>button</button>

				const hello = () => {
				const handler = () => console.log('hello world')
				return handler
				}

				// line above essentially gets transformed into
				<button onClick={() => console.log('hello world')}> button </button>

	- Passing Event Handlers to Child Components
	- Do Not Define Components Within Components
