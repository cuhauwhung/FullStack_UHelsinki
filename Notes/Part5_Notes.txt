------
Part 5
------
a. Login in frontend 
    - intro 
        - will implement front end that supports user management functionality 
        - Logging in is done by sending an HTTP POST request to server address api/login
            - login success: form fields are emptied and the server response is saved to the user field to the applications state 
            - login fail: results in an error, the user is notified 
            - show the login form only if the user is not logged in 
            - react trick for conditional rendering: 
                -  
                    {user === null ?
                    loginForm() :
                    noteForm()
                    }

    - creating new notes 
        - token returned with successful login is saved to the application state user field token 
        - we have to fix creating new notes to work with the backend
            - noteService module would contain a private variable token. It's value can be changed with a function setToken, which is exported by the module 
            - create, now with async/await syntax, sets the token to the Authorization header 

    - saving the token to browsers local storage 
        - when pages are rerendered, information of the user's login disappears
        - use local storage (cache) to save key-value database in the browser 
        - values in the storage stay even when the page is rerendered. 
        - storage is origin-specific so each web app has its own storage 
        - values saved to the storage are DOMstrings, so we cannot save a JavaScript object as is. The object has to be first parsed to JSON with JSON.stringify and then parsed back with JSON.parse
        - use effecthook to fetch notes from the server to the frontend 
        - empty array as the parameter of the effect ensures that he effect is executed oly when the component is rendered for the first time 
        - logging out:
            - window.localStorage.removeItem('loggedNoteappUser')
            - window.loclStorage.clear()

b. props.children and proptypes 
    - displaying login info form only when appropriate 
        - use <div style={hideWhenVisible}> to toggle if we should hide / show sections in the component 
        
    - props.children 
        - Toggable component has both opening and closing tags which surround a LoginFom component. In React terminology LoginForm is a child component of Toggable 
            - we can add any React elements we want between the opening and closing tags of Toggable 
        - the props.children is the code used for referencing the child components of the component. THe child components are the React elements we define between the opening and closing tag of a component 
            - children is automatically added by React and always exists. If a component is defined with an automatically closing />, then the props.children is an empty array 
    
    - state of the forms 
        - should life the shared state up to their closest common ancestor 
        - move the state of hte forms to their corresponding components 
        - functionality should also be passed as well 

    - references to components with ref 
        - use the ref keyword which offers a reference to the component
        - Visibility is controlled with the visible variable inside the Toggable component, but we would want to access it outside of the component 
        - Function that creates the component is wrapped inside ofa forwardRef function call, allowing the component to access the ref that is assigned to it 
        - component uses the useImperativeHandle hook to make its toggleVisibility function available outside of the component
        - we can now hide the form by calling notFormRef.current.toggleVisibility() after a new note has been created 

    - one point about components 
        - when we define a component and create three components, each one has its own separate state 

    - PropTypes 
        - we can defined a prop as mandatory or required string-type prop, so that it won't render empty string 

c. Testing react apps 
    - use jest and react-testing-library to help with testing react apps 
    - will write the rendering the component for tests in the same directory as the tests themselves 

    - rendering the component for tests 
        - the test renders the component with the render method provided by the react-testing-library
            - normal react components are rendered to the DOM., but the render method renders the components in a format that is suitable for tests without rendering them to the DOM 
            - render return object with several properties:
                - container: contains all of the HTML rendered by the component 
                -

    - running tests:
        - create-react-app configures tests otb e run in watch mode by default, which means that the npm test command will not exit once the tests have finished, and will instead wait for changes to be made to the code 
        - if we want to run tests "normally" then we would use the CI=true npm test command 
    
    - test file location 
        - two different conventions for the test file's location:
            - in the same directory as the component 
            - in its own separate "test" directory 
    
    - searching for content in a component 
        1) uses method toHaveContent to search for a matching text from the entire HTML code rendered by the component 
        2) uses the getByText method of the object returned by he render method. Method returns the element that contains the given text 
        3) search for specific element that is rendered by the component with the query selector method that receives a CSS selector as its parameter 
            - last two methods use the methods getByText and querySElector to find an element matching some condition from the rendered component 
    
    - Debugging tests 
        - object returned by the render method has a debug method that can be used to print the HTML rendered by the component to the console 
        - we can also search for a smaller part of the component and print its HTML code 
            - use the prettyDOM method that can be imported from the @testing-library/dom package that is automatically installed with react testing library
            - we used the selector to find the li element inside of the component and printed its HTML to the console 
            - console.log(prettyDOM(li))

    - click buttons in tests 
        - Note component also makes sure that when the button associated with the note is pressed, the toggleImportance event handler function gets called 
        - event handler can be defined as a mock function 
        - test finds the button based on the text from the rendered component and clicks the element 
            - clicking happens with the fireEvent method 
        - Mock objects and functions are commonly used stub components in testing that are used for replacing dependencies of the components being tested
            - mocks make it possible to return hard-coded responses, and to verify the number of times the mock functions are called and with what parameters 

    - tests for the Togglable component 
        - querySelector returns the first matching button
    
    - testing the forms 
        - we can simulate text input with fireEvent

            fireEvent.change(input, { 
                target: {value: 'testing of forms could be easier'}
            })

            fireEvent.submit(form)

    - find out coverage of our tests by 
        - CI=true npm test -- --coverage

d. End to end testing
    - intro 
        - we have tested the backend as a whole on the API using integration tests and tested frontend using unit tests 
            - integration test: individual software modules are combined and tested as a group
            - unit test: individual units of source code, sets of one or more software modules together with associated control data, usage procedures, and operating procedures, are tested to determine whether they are fit for use 
        - end to end (E2E) tests: test the system as a whole 
            - Selenium can be used with any browser
            - headless browsers, which are browsers with no GUI 
            - potentially most useful, because they test the system through the same interface as real users
            - more challenging than unit or integration tests 
            - slow and flaky (some tests might pass one time and fail another, even if the code does not change at all)

    - Cypress
        - easy to use and requires less hassle and headache than Selenium 
        - tests are run completely within the browser. Other libraries run the tests in a Node-process, which is connected to the browser through an API 
        - when we first run Cypress, it creates a cypres directory. It contains a integrations subdirectory, where we will place our tests. Cypress creates a bunch of example test for us, but we will delete all those and make our own test in file 
        - structure of tests: 
            - describe blocks to group different test cases like Jest
            - tests have been defined with the it method 
            - Cypress borrowed these parts from Mocha testing library it uses under the hood
        - cy.visit and cy.contains are Cypress commands 
        - Mocha recommends that arrow functions are not used, because they might cause some issues in certain situations 
        - tests cases are defined with the it() method 
        - ** Cypress uses identifiers that are not classes but ids **
    
    - writing to a form 
        - we can click buttons with the cy.click command
        - we can also use beforeEach() to be performed before each test 
        - cy.get() allows for searching elements by CSS selectors 
        - use cy.type() to type into input fields in the page 
        - we should use CSS classes to make unique identifiers for each input 
        - cypress runs the tests in the order they are in the code

    - controlling the state of the database 
        - server database should be the same each time we run the tests, so or tests can be reliably and easily repeatable 
        - E2E test is that they do not have access to the database 
            - create API endpoints to the backend for the test. 
            - empty the database using these endpoints
        - use cy.request() to send HTTP requests to the backend 
        - 
    
    - failed login test 
        - use cy.contains() to ensure that the application prints an error message 
        - we can ensure that the error message is rendered to the correct component, or the component with the CSS class error 
        - can also use should('have.css', ...) to ensure certain components have color / border properties 
    
    - bypassing the UI 
        - should test login flow but only once
        - Cypress recommends that we bypass the UI and do a HTTP request to the backend to log in. Logging in with a HTTP request is faster than filling a form 
        - we can access the response to a cy.request with the then method, because cy.requests like all Cypress commands are promises 
        - we can make custom command and store it in cypress/support/command.js
        - we can use parent command to access the parent element of the element containing the tag to find the button from within it. Then we click the button, and check the text on it changes 
    
    - running and debugging the tests 
        - when cypress runs a test, it adds each cy command to an execution queue. When the code of the test method has been executed, CYpress will execute each command in the queue one by one
        - Cypress commands always return undefined, so button.click() in the above code would cause an error. An attempt to start the debugger would not stop the code between executing the commands 
        - Cypress commands are like promises, so we have to use then to access them 
        - we can run without Cypress without GUI and using CLI 