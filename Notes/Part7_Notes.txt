------
Part 7
------
a. React-router
    - application navigation structure 
        - old school web app, we would make an HTTP GEt request to the server and re-rending the page, but in single web apps, we are always on the same page 
        - we can use switch / if-elses and have components within these conditionals to render, but not optimal, because they'll all appear under the same url 
        - use react router library which provides method for managing navigation in React application 
        - normally browser loads a new page when the URl in the address bar changes. However, with the help of the HTML5 history API BrowserRouter enables us to use the URL in the address bar of the browser for internal "routing" in a React-application. 
            - inside the router, we define links that modify the address bar with the help of the link component 
            - creates a link in the application with the text notes, which when clicked changes the URL in the address bar to notes
            - components rendered bas on the URL of the browser are defined with the help of the component Route 
    
    - parameterized route 
        - clicking hte name of a note whose id is 3 would trigger an event that changes the address of the browser into notes/3
        - define route rendering a specific note "express style" by marking the parameter with a colon :id 
            - < Route path="/notes/:id" >
        
    - useHistory
        - if a user is logged in, info about a logged in user is saved to the user field of the state of the App component 
        - option to navigate to the Login-View rendered conditionally in the menu 
        - useHistory function allows the component to access a history object, which cam be used to modify the browser's url programmatically 
            - when user logs in, we call the method of the history object; history.push('/'), which causes the browser's url to change to / and the application renders to the corresponding component Home
        - useParams and useHistory are both hook-functions
    
    - redirect 
        - we can redirect page to login view if user is not logged in, instead of going to the home page 
    
    - parameterized route revisited 
        - note component receives all of the notes, even though it only displays the one whose id matches the url parameter
            - we can overcome this by using react-router's useRouteMatch hook to figure out the id of the note to be displayed in the App component 

b. Custom hooks
    - Hooks 
        - most popular: useState, useEffect 
        - useImperativeHandle-hook which allows for components to provide their functions to other components 
        - useSelector and useDispatch hooks from the react-redux library to share our redux-store and dispatch function to our components 
    
    - Custom hooks 
        - building your own hooks lets you extract component logic into reusable functions 
        - custom hooks are regular JS functions that can use any other hooks, as long as they adhere to the rules of hooks 
        - name of custom hooks must start with the word use 
        - conceptually the same as using OOD 
            - there are methods inside each custom hook that modify the values of the hooks 
            - all the hooks are grouped together as variables 
    
    - spread attributes 
        - if an object has all the attributes that the input element expect to receive as props, we can pass the props to the elemtn using the spread syntax in the following way: <input {...name} />
            - E.g.:
                const person = {
                    firstName: 'Dummy',
                    lastName: 'User'
                }

            - < Greeting firstName="Dummy" lastName="user" />
            - < Greeting {... person} />

c. More about styles 
    - Ready-made UI libraries 
        - Bootstrap toolkit created by twitter 
        - react versions of Bootstrap: reactstrap and react-Bootstrap
        - MaterialUI is another framework we can use
            - bad thing is that each component has to be import separately like Table, TableBody, Container
    - point of this is to make the webpage look better

d. Webpack
    - key players in making React applications functional is a tool called webpack 

    - Bundling 
        - browsers don't know how the modules we imported "axios, react-dom, etc." work and need code that is divided to be bundled for browsers - all source code files are transformed into a single file that contains all of the application code so that the browser would understand
        - index.html file located at the root of the build dir is the "main file" of the application 
        - build-script also bundled other CSS files into a single /static/css/main...css file 
        - bundling is done so that we can define an entry point for the application/ When webpack bundles the code, it includes all of the code that the entry point imports, and the code that its imports import, and so on 
        - bundles will also contain imported packages like React, Redux, and Axios 
    
    - Configuration file (webpack.config.js)
        - entry property specifies the file will serve as the entry point
        - output defines the location o the bundled code 
    
    - bundling react / loaders
        - when we try to bundle react code with webpack directly, it'll fail 
        - the reason is that webpack only knows how to deal with plain JavaScript and the components that we've been using in react are actually JSX for rendering our views in React 
        - we essentially use loaders to inform webpack of the files that need to be processed before they are bundled 
            - the babel-loader, defined inside the config webpack config file will convert the JSX into plain old JavaScript 
        
    - Transpilers
        - the process of using babel to change one form of JavaScript into another is called transpiling 
            - normally we just use presets that are groups of pre-configured plugins
    
    - CSS
        - similarly we also need a css loader to load the CSS files and the job of the style loader to generate and inject a style element that contains all of the styles of the application 
    
    - webpack dev server 
        - without the webpack-dev-server, we have to rebundle and refresh the browser to test the code, but with webpack dev server, we can make things faster 
        - the process of updating the code is fast, because when we use the dev-server, the code is not bundled the usual way into the main.js, but the result of the bundling exists only in memory 

    - source maps 
        - at times, location of the error in the message does not match the actual location of the error in our source code. Displayed source codes does not resemble our application code 
        - we can override this by using the source map for the bundle, that makes it possible to map errors that occur during the execution of the bundle to the corresponding part in the original source code 
        - we would have to modify the webpack config and add devtool: 'source-map'
    
    - minifying the code 
        - when we deploy the code, we are using the main.js code bundle that is generated by the webpack. 
            - size is huge, because all of the external libraries are stored
            - we can minify to reduce the size (e.g. remove comments in the libraries)

e. Class components, Miscellaneous 
